// automatically generated by the FlatBuffers compiler, do not modify


#![allow(dead_code)]
#![allow(unused_imports)]
extern crate flatbuffers;

pub mod rustox {
  #![allow(dead_code)]
  #![allow(unused_imports)]

  use std::mem;
  use std::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::EndianScalar;
pub mod procinfo {
  #![allow(dead_code)]
  #![allow(unused_imports)]

  use std::mem;
  use std::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::EndianScalar;

// struct LoadAverage, aligned to 4
#[repr(C, align(4))]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct LoadAverage {
  one_: f32,
  five_: f32,
  fifteen_: f32,
  cur_: u32,
  max_: u32,
  latest_pid_: u32,
} // pub struct LoadAverage
impl flatbuffers::SafeSliceAccess for LoadAverage {}
impl<'a> flatbuffers::Follow<'a> for LoadAverage {
  type Inner = &'a LoadAverage;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    <&'a LoadAverage>::follow(buf, loc)
  }
}
impl<'a> flatbuffers::Follow<'a> for &'a LoadAverage {
  type Inner = &'a LoadAverage;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    flatbuffers::follow_cast_ref::<LoadAverage>(buf, loc)
  }
}
impl<'b> flatbuffers::Push for LoadAverage {
    type Output = LoadAverage;
    #[inline]
    fn push(&self, dst: &mut [u8], _rest: &[u8]) {
        let src = unsafe {
            ::std::slice::from_raw_parts(self as *const LoadAverage as *const u8, Self::size())
        };
        dst.copy_from_slice(src);
    }
}
impl<'b> flatbuffers::Push for &'b LoadAverage {
    type Output = LoadAverage;

    #[inline]
    fn push(&self, dst: &mut [u8], _rest: &[u8]) {
        let src = unsafe {
            ::std::slice::from_raw_parts(*self as *const LoadAverage as *const u8, Self::size())
        };
        dst.copy_from_slice(src);
    }
}


impl LoadAverage {
  pub fn new<'a>(_one: f32, _five: f32, _fifteen: f32, _cur: u32, _max: u32, _latest_pid: u32) -> Self {
    LoadAverage {
      one_: _one.to_little_endian(),
      five_: _five.to_little_endian(),
      fifteen_: _fifteen.to_little_endian(),
      cur_: _cur.to_little_endian(),
      max_: _max.to_little_endian(),
      latest_pid_: _latest_pid.to_little_endian(),

    }
  }
  pub fn one<'a>(&'a self) -> f32 {
    self.one_.from_little_endian()
  }
  pub fn five<'a>(&'a self) -> f32 {
    self.five_.from_little_endian()
  }
  pub fn fifteen<'a>(&'a self) -> f32 {
    self.fifteen_.from_little_endian()
  }
  pub fn cur<'a>(&'a self) -> u32 {
    self.cur_.from_little_endian()
  }
  pub fn max<'a>(&'a self) -> u32 {
    self.max_.from_little_endian()
  }
  pub fn latest_pid<'a>(&'a self) -> u32 {
    self.latest_pid_.from_little_endian()
  }
}

pub enum ProcOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct Proc<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Proc<'a> {
    type Inner = Proc<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> Proc<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        Proc {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args ProcArgs<'args>) -> flatbuffers::WIPOffset<Proc<'bldr>> {
      let mut builder = ProcBuilder::new(_fbb);
      if let Some(x) = args.load { builder.add_load(x); }
      builder.finish()
    }

    pub const VT_LOAD: flatbuffers::VOffsetT = 4;

  #[inline]
  pub fn load(&self) -> Option<&'a LoadAverage> {
    self._tab.get::<LoadAverage>(Proc::VT_LOAD, None)
  }
}

pub struct ProcArgs<'a> {
    pub load: Option<&'a  LoadAverage>,
}
impl<'a> Default for ProcArgs<'a> {
    #[inline]
    fn default() -> Self {
        ProcArgs {
            load: None,
        }
    }
}
pub struct ProcBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> ProcBuilder<'a, 'b> {
  #[inline]
  pub fn add_load(&mut self, load: &'b  LoadAverage) {
    self.fbb_.push_slot_always::<&LoadAverage>(Proc::VT_LOAD, load);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> ProcBuilder<'a, 'b> {
    let start = _fbb.start_table();
    ProcBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Proc<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

#[inline]
pub fn get_root_as_proc<'a>(buf: &'a [u8]) -> Proc<'a> {
  flatbuffers::get_root::<Proc<'a>>(buf)
}

#[inline]
pub fn get_size_prefixed_root_as_proc<'a>(buf: &'a [u8]) -> Proc<'a> {
  flatbuffers::get_size_prefixed_root::<Proc<'a>>(buf)
}

#[inline]
pub fn finish_proc_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<Proc<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_proc_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<Proc<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
}  // pub mod procinfo
}  // pub mod rustox

